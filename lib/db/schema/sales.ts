import { pgTable, text, varchar, integer, timestamp, jsonb, vector, index } from "drizzle-orm/pg-core";
import { sql } from "drizzle-orm";
import { nanoid } from "nanoid";

// Sales Agent Tables (6 tables) - RAG Compatible with pgvector

export const bookUsage = pgTable("book_usage", {
  id: varchar("id", { length: 191 }).primaryKey().$defaultFn(() => nanoid()),
  title: text("title").notNull(),
  platform: text("platform").notNull(),
  publisher: text("publisher").notNull(),
  isbn: varchar("isbn", { length: 50 }),
  yop: integer("yop"), // Year of Publication
  // ALL monthly usage columns (2023-2025) - preserving every data point
  jan2023Unique: integer("jan_2023_unique_title_requests"),
  jan2023Total: integer("jan_2023_total_item_requests"),
  feb2023Unique: integer("feb_2023_unique_title_requests"),
  feb2023Total: integer("feb_2023_total_item_requests"),
  mar2023Unique: integer("mar_2023_unique_title_requests"),
  mar2023Total: integer("mar_2023_total_item_requests"),
  apr2023Unique: integer("apr_2023_unique_title_requests"),
  apr2023Total: integer("apr_2023_total_item_requests"),
  may2023Unique: integer("may_2023_unique_title_requests"),
  may2023Total: integer("may_2023_total_item_requests"),
  jun2023Unique: integer("jun_2023_unique_title_requests"),
  jun2023Total: integer("jun_2023_total_item_requests"),
  jul2023Unique: integer("jul_2023_unique_title_requests"),
  jul2023Total: integer("jul_2023_total_item_requests"),
  aug2023Unique: integer("aug_2023_unique_title_requests"),
  aug2023Total: integer("aug_2023_total_item_requests"),
  sep2023Unique: integer("sep_2023_unique_title_requests"),
  sep2023Total: integer("sep_2023_total_item_requests"),
  oct2023Unique: integer("oct_2023_unique_title_requests"),
  oct2023Total: integer("oct_2023_total_item_requests"),
  nov2023Unique: integer("nov_2023_unique_title_requests"),
  nov2023Total: integer("nov_2023_total_item_requests"),
  dec2023Unique: integer("dec_2023_unique_title_requests"),
  dec2023Total: integer("dec_2023_total_item_requests"),
  // 2024 data
  jan2024Unique: integer("jan_2024_unique_title_requests"),
  jan2024Total: integer("jan_2024_total_item_requests"),
  feb2024Unique: integer("feb_2024_unique_title_requests"),
  feb2024Total: integer("feb_2024_total_item_requests"),
  mar2024Unique: integer("mar_2024_unique_title_requests"),
  mar2024Total: integer("mar_2024_total_item_requests"),
  apr2024Unique: integer("apr_2024_unique_title_requests"),
  apr2024Total: integer("apr_2024_total_item_requests"),
  may2024Unique: integer("may_2024_unique_title_requests"),
  may2024Total: integer("may_2024_total_item_requests"),
  jun2024Unique: integer("jun_2024_unique_title_requests"),
  jun2024Total: integer("jun_2024_total_item_requests"),
  jul2024Unique: integer("jul_2024_unique_title_requests"),
  jul2024Total: integer("jul_2024_total_item_requests"),
  aug2024Unique: integer("aug_2024_unique_title_requests"),
  aug2024Total: integer("aug_2024_total_item_requests"),
  sep2024Unique: integer("sep_2024_unique_title_requests"),
  sep2024Total: integer("sep_2024_total_item_requests"),
  oct2024Unique: integer("oct_2024_unique_title_requests"),
  oct2024Total: integer("oct_2024_total_item_requests"),
  nov2024Unique: integer("nov_2024_unique_title_requests"),
  nov2024Total: integer("nov_2024_total_item_requests"),
  dec2024Unique: integer("dec_2024_unique_title_requests"),
  dec2024Total: integer("dec_2024_total_item_requests"),
  // 2025 data
  jan2025Unique: integer("jan_2025_unique_title_requests"),
  jan2025Total: integer("jan_2025_total_item_requests"),
  feb2025Unique: integer("feb_2025_unique_title_requests"),
  feb2025Total: integer("feb_2025_total_item_requests"),
  mar2025Unique: integer("mar_2025_unique_title_requests"),
  mar2025Total: integer("mar_2025_total_item_requests"),
  apr2025Unique: integer("apr_2025_unique_title_requests"),
  apr2025Total: integer("apr_2025_total_item_requests"),
  may2025Unique: integer("may_2025_unique_title_requests"),
  may2025Total: integer("may_2025_total_item_requests"),
  jun2025Unique: integer("jun_2025_unique_title_requests"),
  jun2025Total: integer("jun_2025_total_item_requests"),
  jul2025Unique: integer("jul_2025_unique_title_requests"),
  jul2025Total: integer("jul_2025_total_item_requests"),
  aug2025Unique: integer("aug_2025_unique_title_requests"),
  aug2025Total: integer("aug_2025_total_item_requests"),
  // RAG fields
  content: text("content").notNull(), // Combined searchable content
  embedding: vector("embedding", { dimensions: 1536 }), // pgvector for RAG
  createdAt: timestamp("created_at").default(sql`now()`).notNull(),
}, (table) => ({
  embeddingIndex: index("book_usage_embedding_idx").using("hnsw", table.embedding.op("vector_cosine_ops")),
}));

export const journalUsage = pgTable("journal_usage", {
  id: varchar("id", { length: 191 }).primaryKey().$defaultFn(() => nanoid()),
  title: text("title").notNull(),
  publisher: text("publisher").notNull(),
  onlineIssn: varchar("online_issn", { length: 50 }),
  printIssn: varchar("print_issn", { length: 50 }),
  // ALL monthly usage columns (2023-2025) - preserving every data point
  jan2023Total: integer("jan_2023_total_item_requests"),
  jan2023Unique: integer("jan_2023_unique_item_requests"),
  feb2023Total: integer("feb_2023_total_item_requests"),
  feb2023Unique: integer("feb_2023_unique_item_requests"),
  mar2023Total: integer("mar_2023_total_item_requests"),
  mar2023Unique: integer("mar_2023_unique_item_requests"),
  apr2023Total: integer("apr_2023_total_item_requests"),
  apr2023Unique: integer("apr_2023_unique_item_requests"),
  may2023Total: integer("may_2023_total_item_requests"),
  may2023Unique: integer("may_2023_unique_item_requests"),
  jun2023Total: integer("jun_2023_total_item_requests"),
  jun2023Unique: integer("jun_2023_unique_item_requests"),
  jul2023Total: integer("jul_2023_total_item_requests"),
  jul2023Unique: integer("jul_2023_unique_item_requests"),
  aug2023Total: integer("aug_2023_total_item_requests"),
  aug2023Unique: integer("aug_2023_unique_item_requests"),
  sep2023Total: integer("sep_2023_total_item_requests"),
  sep2023Unique: integer("sep_2023_unique_item_requests"),
  oct2023Total: integer("oct_2023_total_item_requests"),
  oct2023Unique: integer("oct_2023_unique_item_requests"),
  nov2023Total: integer("nov_2023_total_item_requests"),
  nov2023Unique: integer("nov_2023_unique_item_requests"),
  dec2023Total: integer("dec_2023_total_item_requests"),
  dec2023Unique: integer("dec_2023_unique_item_requests"),
  // 2024 data
  jan2024Total: integer("jan_2024_total_item_requests"),
  jan2024Unique: integer("jan_2024_unique_item_requests"),
  feb2024Total: integer("feb_2024_total_item_requests"),
  feb2024Unique: integer("feb_2024_unique_item_requests"),
  mar2024Total: integer("mar_2024_total_item_requests"),
  mar2024Unique: integer("mar_2024_unique_item_requests"),
  apr2024Total: integer("apr_2024_total_item_requests"),
  apr2024Unique: integer("apr_2024_unique_item_requests"),
  may2024Total: integer("may_2024_total_item_requests"),
  may2024Unique: integer("may_2024_unique_item_requests"),
  jun2024Total: integer("jun_2024_total_item_requests"),
  jun2024Unique: integer("jun_2024_unique_item_requests"),
  jul2024Total: integer("jul_2024_total_item_requests"),
  jul2024Unique: integer("jul_2024_unique_item_requests"),
  aug2024Total: integer("aug_2024_total_item_requests"),
  aug2024Unique: integer("aug_2024_unique_item_requests"),
  sep2024Total: integer("sep_2024_total_item_requests"),
  sep2024Unique: integer("sep_2024_unique_item_requests"),
  oct2024Total: integer("oct_2024_total_item_requests"),
  oct2024Unique: integer("oct_2024_unique_item_requests"),
  nov2024Total: integer("nov_2024_total_item_requests"),
  nov2024Unique: integer("nov_2024_unique_item_requests"),
  dec2024Total: integer("dec_2024_total_item_requests"),
  dec2024Unique: integer("dec_2024_unique_item_requests"),
  // 2025 data
  jan2025Total: integer("jan_2025_total_item_requests"),
  jan2025Unique: integer("jan_2025_unique_item_requests"),
  feb2025Total: integer("feb_2025_total_item_requests"),
  feb2025Unique: integer("feb_2025_unique_item_requests"),
  mar2025Total: integer("mar_2025_total_item_requests"),
  mar2025Unique: integer("mar_2025_unique_item_requests"),
  apr2025Total: integer("apr_2025_total_item_requests"),
  apr2025Unique: integer("apr_2025_unique_item_requests"),
  may2025Total: integer("may_2025_total_item_requests"),
  may2025Unique: integer("may_2025_unique_item_requests"),
  jun2025Total: integer("jun_2025_total_item_requests"),
  jun2025Unique: integer("jun_2025_unique_item_requests"),
  jul2025Total: integer("jul_2025_total_item_requests"),
  jul2025Unique: integer("jul_2025_unique_item_requests"),
  aug2025Total: integer("aug_2025_total_item_requests"),
  aug2025Unique: integer("aug_2025_unique_item_requests"),
  // RAG fields
  content: text("content").notNull(), // Combined searchable content
  embedding: vector("embedding", { dimensions: 1536 }), // pgvector for RAG
  createdAt: timestamp("created_at").default(sql`now()`).notNull(),
}, (table) => ({
  embeddingIndex: index("journal_usage_embedding_idx").using("hnsw", table.embedding.op("vector_cosine_ops")),
}));

export const bookDenials = pgTable("book_denials", {
  id: varchar("id", { length: 191 }).primaryKey().$defaultFn(() => nanoid()),
  title: text("title").notNull(),
  publisher: text("publisher").notNull(),
  isbn: varchar("isbn", { length: 50 }),
  yop: integer("yop"), // Year of Publication
  // ALL monthly denial columns (2023-2025) - preserving every data point
  jan2023LimitExceeded: integer("jan_2023_limit_exceeded"),
  jan2023NoLicense: integer("jan_2023_no_license"),
  feb2023NoLicense: integer("feb_2023_no_license"),
  mar2023NoLicense: integer("mar_2023_no_license"),
  mar2023LimitExceeded: integer("mar_2023_limit_exceeded"),
  apr2023NoLicense: integer("apr_2023_no_license"),
  apr2023LimitExceeded: integer("apr_2023_limit_exceeded"),
  may2023NoLicense: integer("may_2023_no_license"),
  may2023LimitExceeded: integer("may_2023_limit_exceeded"),
  jun2023NoLicense: integer("jun_2023_no_license"),
  jul2023NoLicense: integer("jul_2023_no_license"),
  aug2023NoLicense: integer("aug_2023_no_license"),
  aug2023LimitExceeded: integer("aug_2023_limit_exceeded"),
  sep2023NoLicense: integer("sep_2023_no_license"),
  sep2023LimitExceeded: integer("sep_2023_limit_exceeded"),
  oct2023NoLicense: integer("oct_2023_no_license"),
  nov2023NoLicense: integer("nov_2023_no_license"),
  dec2023NoLicense: integer("dec_2023_no_license"),
  // 2024 data
  jan2024NoLicense: integer("jan_2024_no_license"),
  jan2024LimitExceeded: integer("jan_2024_limit_exceeded"),
  feb2024NoLicense: integer("feb_2024_no_license"),
  mar2024NoLicense: integer("mar_2024_no_license"),
  mar2024LimitExceeded: integer("mar_2024_limit_exceeded"),
  apr2024NoLicense: integer("apr_2024_no_license"),
  apr2024LimitExceeded: integer("apr_2024_limit_exceeded"),
  may2024NoLicense: integer("may_2024_no_license"),
  may2024LimitExceeded: integer("may_2024_limit_exceeded"),
  jun2024NoLicense: integer("jun_2024_no_license"),
  jul2024NoLicense: integer("jul_2024_no_license"),
  aug2024NoLicense: integer("aug_2024_no_license"),
  aug2024LimitExceeded: integer("aug_2024_limit_exceeded"),
  sep2024NoLicense: integer("sep_2024_no_license"),
  sep2024LimitExceeded: integer("sep_2024_limit_exceeded"),
  oct2024NoLicense: integer("oct_2024_no_license"),
  oct2024LimitExceeded: integer("oct_2024_limit_exceeded"),
  nov2024NoLicense: integer("nov_2024_no_license"),
  nov2024LimitExceeded: integer("nov_2024_limit_exceeded"),
  dec2024NoLicense: integer("dec_2024_no_license"),
  // 2025 data
  jan2025NoLicense: integer("jan_2025_no_license"),
  jan2025LimitExceeded: integer("jan_2025_limit_exceeded"),
  feb2025NoLicense: integer("feb_2025_no_license"),
  feb2025LimitExceeded: integer("feb_2025_limit_exceeded"),
  mar2025NoLicense: integer("mar_2025_no_license"),
  mar2025LimitExceeded: integer("mar_2025_limit_exceeded"),
  apr2025NoLicense: integer("apr_2025_no_license"),
  apr2025LimitExceeded: integer("apr_2025_limit_exceeded"),
  may2025NoLicense: integer("may_2025_no_license"),
  may2025LimitExceeded: integer("may_2025_limit_exceeded"),
  jun2025NoLicense: integer("jun_2025_no_license"),
  jul2025NoLicense: integer("jul_2025_no_license"),
  aug2025NoLicense: integer("aug_2025_no_license"),
  aug2025LimitExceeded: integer("aug_2025_limit_exceeded"),
  // RAG fields
  content: text("content").notNull(), // Combined searchable content
  embedding: vector("embedding", { dimensions: 1536 }), // pgvector for RAG
  createdAt: timestamp("created_at").default(sql`now()`).notNull(),
}, (table) => ({
  embeddingIndex: index("book_denials_embedding_idx").using("hnsw", table.embedding.op("vector_cosine_ops")),
}));

export const journalDenials = pgTable("journal_denials", {
  id: varchar("id", { length: 191 }).primaryKey().$defaultFn(() => nanoid()),
  title: text("title").notNull(),
  publisher: text("publisher").notNull(),
  onlineIssn: varchar("online_issn", { length: 50 }),
  printIssn: varchar("print_issn", { length: 50 }),
  // ALL monthly denial columns (2023-2025) - preserving every data point
  feb2023NoLicense: integer("feb_2023_no_license"),
  mar2023NoLicense: integer("mar_2023_no_license"),
  apr2023NoLicense: integer("apr_2023_no_license"),
  may2023NoLicense: integer("may_2023_no_license"),
  jun2023NoLicense: integer("jun_2023_no_license"),
  sep2023NoLicense: integer("sep_2023_no_license"),
  oct2023NoLicense: integer("oct_2023_no_license"),
  mar2024NoLicense: integer("mar_2024_no_license"),
  apr2024NoLicense: integer("apr_2024_no_license"),
  may2024NoLicense: integer("may_2024_no_license"),
  aug2024NoLicense: integer("aug_2024_no_license"),
  sep2024NoLicense: integer("sep_2024_no_license"),
  oct2024NoLicense: integer("oct_2024_no_license"),
  nov2024NoLicense: integer("nov_2024_no_license"),
  dec2024NoLicense: integer("dec_2024_no_license"),
  jan2025NoLicense: integer("jan_2025_no_license"),
  feb2025NoLicense: integer("feb_2025_no_license"),
  mar2025NoLicense: integer("mar_2025_no_license"),
  apr2025NoLicense: integer("apr_2025_no_license"),
  jun2025NoLicense: integer("jun_2025_no_license"),
  jul2025NoLicense: integer("jul_2025_no_license"),
  aug2025NoLicense: integer("aug_2025_no_license"),
  // RAG fields
  content: text("content").notNull(), // Combined searchable content
  embedding: vector("embedding", { dimensions: 1536 }), // pgvector for RAG
  createdAt: timestamp("created_at").default(sql`now()`).notNull(),
}, (table) => ({
  embeddingIndex: index("journal_denials_embedding_idx").using("hnsw", table.embedding.op("vector_cosine_ops")),
}));

export const booksPurchased = pgTable("books_purchased", {
  id: varchar("id", { length: 191 }).primaryKey().$defaultFn(() => nanoid()),
  bookcode: varchar("bookcode", { length: 50 }).notNull(),
  bookTitle: text("book_title").notNull(),
  authorName: text("author_name"),
  university: text("university"),
  year: integer("year").notNull(),
  // RAG fields
  content: text("content").notNull(), // Combined searchable content
  embedding: vector("embedding", { dimensions: 1536 }), // pgvector for RAG
  createdAt: timestamp("created_at").default(sql`now()`).notNull(),
}, (table) => ({
  embeddingIndex: index("books_purchased_embedding_idx").using("hnsw", table.embedding.op("vector_cosine_ops")),
}));

export const journalSubscriptionsPrevYear = pgTable("journal_subscriptions_prev_year", {
  id: varchar("id", { length: 191 }).primaryKey().$defaultFn(() => nanoid()),
  journalTitle: text("journal_title").notNull(),
  journalAbbreviation: varchar("journal_abbreviation", { length: 50 }).notNull(),
  // ALL yearly columns (2012-2024) - preserving every data point
  year2012: integer("year_2012"),
  year2013: integer("year_2013"),
  year2014: integer("year_2014"),
  year2015: integer("year_2015"),
  year2016: integer("year_2016"),
  year2017: integer("year_2017"),
  year2018: integer("year_2018"),
  year2019: integer("year_2019"),
  year2020: integer("year_2020"),
  year2021: integer("year_2021"),
  year2022: integer("year_2022"),
  year2023: integer("year_2023"),
  year2024: integer("year_2024"),
  // RAG fields
  content: text("content").notNull(), // Combined searchable content
  embedding: vector("embedding", { dimensions: 1536 }), // pgvector for RAG
  createdAt: timestamp("created_at").default(sql`now()`).notNull(),
}, (table) => ({
  embeddingIndex: index("journal_subscriptions_prev_year_embedding_idx").using("hnsw", table.embedding.op("vector_cosine_ops")),
}));
